import { useState, useEffect } from "react"
import {
  {{- range . }}
  {{ toPascalCase .Name }}, get{{ toPascalCase .Name }}Columns,
  {{- end }}
} from "@/components/columns"
import { DataTable } from "./data-table"
import { Resource, Resources, resourceName } from "@/types/resources"
import { Navbar } from "@/components/Navbar"
import { DialogResource } from "@/components/DialogResource"
import { DisplayResource } from "@/components/DisplayResource"
import { Toaster, toast } from "sonner"

const getColumns = (
  resource: string,
  updateTable: ()=>void,
): ColumnDef<TData, TValue>[] => {
  switch (resource) {
    {{- range . }}
     case "{{ .Name }}": return get{{ toPascalCase .Name }}Columns(updateTable)
    {{- end }}
    default:
      return []
  }
}

export function AppPage() {
  const [resource, setResource] = useState<string>(resourceName[0])
  const [needUpdate, setNeedUpdate] = useState<bool>(false)
  const [resources, setResources] = useState<Resources>([])
  const [itemSelected, setItemSelected] = useState<Resource|null>(null)
  const [isDisplayOpen, setIsDisplayOpen] = useState<bool>(false)

  const updateTable = () => {
    setNeedUpdate(!needUpdate)
  }

  const handleRowClick = (e, item) => {
    if (e.target.matches("button")) {
      return
    }
    setItemSelected(item)
    setIsDisplayOpen(true)
    toast.message(JSON.stringify(itemSelected, null, 2))
  }

  useEffect(() => {
    const getData = async () => {
      const dataResponse = await fetch(`http://localhost:8080/${resource}`)
      const data = await dataResponse.json()
      setResources(data)
    }

    getData()

  }, [resource, needUpdate])


  return (
    <div className="container mx-auto py-10 space-y-4" >
      <Navbar resource={ resource } setResource={ setResource } />
      <DialogResource
        resource={ resource }
        setResource={ setResource }
        updateTable={ updateTable }
      />
      <DisplayResource
        resourceName={ resource }
        resource={ itemSelected }
        isDisplayOpen={ isDisplayOpen }
        setIsDisplayOpen={ setIsDisplayOpen }
      />
      <DataTable 
        columns={ getColumns(resource, updateTable) }
        data={ resources }
        onRowClick={ handleRowClick }
      />
      <Toaster richColors closeButton />
    </div>
  )
}
