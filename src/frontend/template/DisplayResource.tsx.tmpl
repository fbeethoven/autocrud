import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Resource } from "@/types/resources"
{{- range .Tables }}
import { {{ toPascalCase .Name }} } from "@/types/{{ toPascalCase .Name }}" 
{{- end }}
import { Pencil } from "lucide-react"

{{- range .Tables }}
interface {{ toPascalCase .Name }}CardProps {
  resource: {{ toPascalCase .Name }}
}

const {{ toPascalCase .Name }}Card = ({resource}: ResourceCardProps) => {

  return (
    <div className="space-y-4" >
{{- range .Fields }}
      <div className="grid w-full max-w-sm items-center gap-1.5">
        <p className="text-muted-foreground">{{ .Name }}</p>
        <p>{ resource.{{ .Name }} }</p>
      </div>
{{- end }}
    </div>
  )
}
{{- end }}

interface ResourceCardProps {
  resourceName: string
  resource: Resource
}

const ResourceCard = ({
  resourceName,
  resource,
}: ResourceCardProps) => {

  switch(resourceName) {
{{- range .Tables }}
    case "{{ .Name }}":
      return <{{ toPascalCase .Name }}Card resource={ resource } />
{{- end }}
  }

  return (<></>)
}

interface DisplayDialogProps {
  resourceName: string
  resource: Resource
  isDisplayOpen: bool
  setIsDisplayOpen: (bool)=>bool
}

export const DisplayResource = ({
  resourceName,
  resource,
  isDisplayOpen,
  setIsDisplayOpen,
}: DisplayResourceProp
) => {
  const makeTitle = (snakeCase: string): string => {
    return snakeCase.split("_").map((item)=> {
      return item.charAt(0).toUpperCase() + item.slice(1)
    }).join(" ")
  }

  return (
    <Dialog open={ isDisplayOpen } onOpenChange={ setIsDisplayOpen } >
      <DialogContent>
        <DialogHeader>
          <DialogTitle>{ makeTitle(resourceName) }</DialogTitle>
          <DialogDescription />
        </DialogHeader>
        <ResourceCard 
          resourceName={resourceName}
          resource={resource}
        />
      </DialogContent>
    </Dialog>
  )
}
