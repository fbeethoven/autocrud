package codegen

import (
	"bytes"
	"io"
	"testing"

	"github.com/stretchr/testify/assert"

	"autocrud/src/config"
)

type TestGenerateBuffer struct {
	buffer bytes.Buffer
}

func (g *TestGenerateBuffer) CreateBuffer(destPath string) (io.Writer, error) {
	return &g.buffer, nil
}

func (g *TestGenerateBuffer) Close() {}

func TestGenerateMain(t *testing.T) {
	witness := TestGenerateBuffer{}
	BeginTest(&witness)

	expected := `/* This code is autogenerated by Autocrud v0.1.0 */

package main

import (
    "test/src/controller"
)

func main() {
    server := controller.NewController()
    server.Run(
        "localhost:8080",

        controller.NewUserController(),

    )
}

`

	conf := config.Config{
		Schema: config.Schema{
			Tables: []config.TableSchema{
				{
					Name: "user",
					Fields: []config.FieldSchema{
						{
							Name: "user_id",
							Type: "int",
						},
						{
							Name: "created_at",
							Type: "timestamp",
						},
					},
				},
			},
		},
	}

	err := GenerateMain("output.go", "test", conf)

	assert.NoError(t, err)

	assert.Equal(t, expected, witness.buffer.String())
}

func TestGenerateModel(t *testing.T) {
	witness := TestGenerateBuffer{}
	BeginTest(&witness)

	expected := `/* This code is autogenerated by Autocrud v0.1.0 */

package models



type User struct {

    User_id int

}


`

	table := config.TableSchema{
		Name: "user",
		Fields: []config.FieldSchema{
			{
				Name: "user_id",
				Type: "int",
			},
		},
	}
	err := GenerateModel("output.go", table)

	assert.NoError(t, err)

	assert.Equal(t, expected, witness.buffer.String())
}

func TestGenerateModelImportTime(t *testing.T) {
	witness := TestGenerateBuffer{}
	BeginTest(&witness)

	expected := `/* This code is autogenerated by Autocrud v0.1.0 */

package models


import (
    "time"
)


type User struct {

    User_id int

    Created_at time.Time

}


`

	table := config.TableSchema{
		Name: "user",
		Fields: []config.FieldSchema{
			{
				Name: "user_id",
				Type: "int",
			},
			{
				Name: "created_at",
				Type: "timestamp",
			},
		},
	}
	err := GenerateModel("output.go", table)

	assert.NoError(t, err)

	assert.Equal(t, expected, witness.buffer.String())
}

func TestGenerateDAO(t *testing.T) {
	witness := TestGenerateBuffer{}
	BeginTest(&witness)

	expected := `/* This code is autogenerated by Autocrud v0.1.0 */

package dao

import (
    "test/src/models"
)

type UserDAO struct {}

func (r UserDAO) GetResource() ([]models.User, error) {
    result := make([]models.User, 0)
    return result, nil
}

func (r UserDAO) GetResourceById(_ int) (models.User, error) {
    return models.User{}, nil
}
`

	table := config.TableSchema{
		Name: "user",
		Fields: []config.FieldSchema{
			{
				Name: "user_id",
				Type: "int",
			},
			{
				Name: "created_at",
				Type: "timestamp",
			},
		},
	}
	err := GenerateDAO("output.go", "test", table)

	assert.NoError(t, err)

	assert.Equal(t, expected, witness.buffer.String())
}

func TestGenerateController(t *testing.T) {
	witness := TestGenerateBuffer{}
	BeginTest(&witness)

	expected := `/* This code is autogenerated by Autocrud v0.1.0 */

package controller

import (
    "net/http"

    "github.com/gin-gonic/gin"

    "test/src/models"
    "test/src/dao"
)

type UserController struct {
    UserDAO dao.UserDAO
}

func NewUserController() *UserController {
    return &UserController{
        UserDAO: dao.UserDAO{},
    }
}

func (c UserController) GetResource(ctx *gin.Context) {
    ctx.JSON(http.StatusOK, make([]models.User, 0))
}

func (c UserController) GetResourceById(ctx *gin.Context) {
    userId := ctx.Param("id")
    ctx.JSON(http.StatusOK, gin.H{
        "UserId": userId,
    })
}

func (c UserController) RegisterResource(controller *Controller) {
    controller.Resources = append(controller.Resources, c)

    controller.Router.GET("/user", c.GetResource)
    controller.Router.GET("/user/:id", c.GetResourceById)
}
`

	table := config.TableSchema{
		Name: "user",
		Fields: []config.FieldSchema{
			{
				Name: "user_id",
				Type: "int",
			},
			{
				Name: "created_at",
				Type: "timestamp",
			},
		},
	}
	err := GenerateController("output.go", "test", table)

	assert.NoError(t, err)

	assert.Equal(t, expected, witness.buffer.String())
}

func TestGenerateControllerRouter(t *testing.T) {
	witness := TestGenerateBuffer{}
	BeginTest(&witness)

	expected := `/* This code is autogenerated by Autocrud v0.1.0 */

package controller

import (
    "github.com/gin-contrib/cors"
    "github.com/gin-gonic/gin"

    _ "test/src/models"
    _ "test/src/dao"
)

type ResourceController interface {
    RegisterResource(*Controller)
}

type Controller struct {
    Router    *gin.Engine
    Resources []ResourceController
}

func NewController() *Controller {
    router := gin.Default()
    router.Use(cors.Default())

    return &Controller{
        Router:    router,
        Resources: make([]ResourceController, 0),
    }
}

func (c *Controller) Run(addr string, resources ...ResourceController) {
    for _, controller := range resources {
        controller.RegisterResource(c)
    }
        c.Router.Run(addr)
}
`

	err := GenerateControllerRouter("output.go", "test")

	assert.NoError(t, err)

	assert.Equal(t, expected, witness.buffer.String())
}
