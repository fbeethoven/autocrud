/* This code is autogenerated by Autocrud {{ .Version }} */

package dao

import (
    "database/sql"

    _ "github.com/mattn/go-sqlite3"

    "{{ .ProjectName }}/src/models"
)

type {{ .Resource }}DAO struct {}

func (r {{ .Resource }}DAO) GetResource() ([]models.{{ .Resource }}, error) {
    db, err := sql.Open("sqlite3", "{{ .DatabasePath }}")
    if err != nil {
        return nil, err
    }
    defer db.Close()

    query := "{{ .QueryResource }}"

    rows, err := db.Query(query)
    if err != nil {
        return nil, err
    }
    defer rows.Close()

    resources := make([]models.{{ .Resource }}, 0)

    for rows.Next() {
        resource := models.{{ .Resource }}{}
        err := rows.Scan(
{{ range .Fields }}
            &resource.{{ . }},
{{ end }}
        )
        if err != nil {
            return nil, err
        }

        resources = append(resources, resource)
    }

    return resources, nil
}

func (r {{ .Resource }}DAO) CreateResource(in *models.{{ .Resource }}) (int, error) {
    db, err := sql.Open("sqlite3", "{{ .DatabasePath }}")
    if err != nil {
        return 0, err
    }
    defer db.Close()

    query := `INSERT INTO {{ .TableName }} ({{ range $i, $v := .TableColumns }}{{ $v }}{{ if lt $i ( sub ( len $.TableColumns) 1) }},{{end}}{{ end }})
    VALUES ({{ range $i, $v := .TableColumns }}?{{ if lt $i ( sub ( len $.TableColumns) 1) }},{{end}}{{end}});`
    result, err := db.Exec(
        query,
{{ range $i, $v := .Fields }}
{{ if eq $i 0 }}{{ else }}
        in.{{ . }},
{{ end }}
{{ end }}
    )
    if err != nil {
        return 0, err
    }

    newId, err := result.LastInsertId()
    if err != nil {
        return 0, err
    }

    return int(newId), nil
}

func (r {{ .Resource }}DAO) UpdateResource(in *models.{{ .Resource }}) error {
    db, err := sql.Open("sqlite3", "{{ .DatabasePath }}")
    if err != nil {
        return err
    }
    defer db.Close()

    query := `UPDATE {{ .TableName }} SET
{{ range $i, $v := .TableColumns }}
    {{ $v }}=?{{ if lt $i ( sub ( len $.TableColumns) 1) }},{{end}}
{{end}}
    WHERE {{ .TableIdField }} = ?
    ;`

    stmt, err := db.Prepare(query)
    if err != nil {
        return err
    }
    defer stmt.Close()

    _, err = stmt.Exec(
{{ range $i, $v := .Fields }}{{ if eq $i 0 }}{{ else }}
        in.{{ . }},
{{ end }}{{ end }}in.{{ index .Fields 0 }},
    )
    if err != nil {
        return err
    }

    return nil
}

func (r {{ .Resource }}DAO) GetResourceById(resourceId string) (*models.{{ .Resource }}, error) {
    db, err := sql.Open("sqlite3", "{{ .DatabasePath }}")
    if err != nil {
        return nil, err
    }
    defer db.Close()

    query := "{{ .QueryResourceById }}"

    resource := models.{{ .Resource }}{}

    err = db.QueryRow(query, resourceId).Scan(
{{ range .Fields }}
        &resource.{{ . }},
{{ end }}
    )
    if err != nil {
        return nil, err
    }

    return &resource, nil
}

func (r {{ .Resource }}DAO) DeleteResourceById(resourceId string) error {
    db, err := sql.Open("sqlite3", "{{ .DatabasePath }}")
    if err != nil {
        return err
    }
    defer db.Close()

    stmt, err := db.Prepare("DELETE FROM {{ .TableName }} WHERE {{ .TableIdField }} = ?;")
    if err != nil {
        return err
    }

    _, err = stmt.Exec(resourceId)
    if err != nil {
        return err
    }

    return nil
}
