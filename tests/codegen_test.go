package tests

import (
	"bytes"
	"io"
	"testing"

	"github.com/stretchr/testify/assert"

	"autocrud/src/codegen"
	"autocrud/src/config"
)

type TestGenerateBuffer struct {
	buffer bytes.Buffer
}

func (g *TestGenerateBuffer) CreateBuffer(destPath string) (io.Writer, error) {
	return &g.buffer, nil
}

func (g *TestGenerateBuffer) Close() {}

func TestGenerateMain(t *testing.T) {
	witness := TestGenerateBuffer{}
	codegen.BeginTest(&witness)

	expected := `/* This code is autogenerated by Autocrud v0.1.0 */

package main

import (
    "fmt"
)

func main() {
    fmt.Println("test message")
}

`

	err := codegen.GenerateMain("output.go", "main", "test message")

	assert.NoError(t, err)

	assert.Equal(t, expected, witness.buffer.String())
}

func TestGenerateModel(t *testing.T) {
	witness := TestGenerateBuffer{}
	codegen.BeginTest(&witness)

	expected := `/* This code is autogenerated by Autocrud v0.1.0 */

package models



type User struct {

    User_id int

}


`

	table := config.TableSchema{
		Name: "user",
		Fields: []config.FieldSchema{
			{
				Name: "user_id",
				Type: "int",
			},
		},
	}
	err := codegen.GenerateModel("output.go", table)

	assert.NoError(t, err)

	assert.Equal(t, expected, witness.buffer.String())
}

func TestGenerateModelImportTime(t *testing.T) {
	witness := TestGenerateBuffer{}
	codegen.BeginTest(&witness)

	expected := `/* This code is autogenerated by Autocrud v0.1.0 */

package models


import (
    "time"
)


type User struct {

    User_id int

    Created_at time.Time

}


`

	table := config.TableSchema{
		Name: "user",
		Fields: []config.FieldSchema{
			{
				Name: "user_id",
				Type: "int",
			},
			{
				Name: "created_at",
				Type: "timestamp",
			},
		},
	}
	err := codegen.GenerateModel("output.go", table)

	assert.NoError(t, err)

	assert.Equal(t, expected, witness.buffer.String())
}
